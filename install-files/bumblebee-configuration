#!/bin/bash

#
# ----------------------------------------------------------------------------
# "THE BEER-WARE LICENSE" (Revision 42):
# <mj@casalogic.dk> wrote this file. As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return Martin Juhl
# ----------------------------------------------------------------------------
#

#    This file is part of bumblebee.
#
#    bumblebee is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    bumblebee is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with bumblebee.  If not, see <http://www.gnu.org/licenses/>.
#


ROOT_UID=0

if [ `cat /etc/issue | grep -nir fedora | wc -l` -gt 0 ] ; then
	DISTRO=FEDORA
	DEFAULT_FILE=/etc/default/bumblebee
elif [ `cat /etc/issue | grep -nir ubuntu | wc -l` -gt 0 ] || \
     [ `cat /etc/issue | grep -nir "Linux Mint" | wc -l` -gt 0 ] || \
     [ `cat /etc/issue | grep -nir "Backtrack 5" | wc -l` -gt 0 ] ; then
	DISTRO=UBUNTU
	DEFAULT_FILE=/etc/default/bumblebee-initial
elif [ `cat /etc/issue | grep -nir opensuse | wc -l` -gt 0 ] ; then
	DISTRO=OPENSUSE
	DEFAULT_FILE=/etc/default/bumblebee
	if [ "$SUDO_USER" != "" ] ; then
		HOME=`cat /etc/passwd | grep $SUDO_USER | cut -f6 -d':'`
	fi
else
	echo "Cannot handle this distribution."
fi

if [ "$UID" != "$ROOT_UID" ] ; then
	echo "You don't have sufficient privileges to run this script."
	echo
	echo "Please run the script with: sudo bumblebee-configuration"
	exit 1
fi

# Determine Arch x86_64 or i686
ARCH=`uname -m`

# Get tools location
LSPCI=`which lspci`
MODPROBE=`which modprobe`

# Get terminal size
LINES=`stty size | cut -f1 -d' '`
COLUMNS=`stty size | cut -f2 -d' '`

if [ -f $DEFAULT_FILE ] ; then
	whiptail --yesno \
"Bumblebee Configuration.\n\n"\
"Do you want to reconfigure bumblebee????" $LINES $COLUMNS
	if [ $? -eq 1 ]; then
		exit 0
	fi
else
	rm $DEFAULT_FILE
fi

if [ -f /tmp/machineinfo ]; then
	rm /tmp/machineinfo
fi

if [ "$DISTRO" == "UBUNTU" ] ; then
	# Before you start with messing with symlinks or removing files, make sure
	# that you know what you are doing. Examine the installation scripts of
	# nvidia-current and libgl1-mesa-glx to get an idea how the alternatives
	# system should be used. If you're using rm or ln in /etc/alternatives, you
	# are doing it wrong.
	# A helpful command for showing links being created on configuring an other
	# alternative:     update-alternatives --display gl_conf

	# Since Bumblebee is a project to get Optimus laptops to work, we can safely
	# assume that the nvidia driver is not used for the default display (:0)
	# Therefore default to mesa instead of nvidia. vglrun sets the GL library
	# path to /usr/lib{,32}/nvidia-current for programs running on the display
	# accelerated by the nvidia card. Since most graphical applications are not
	# statically linked nor setuid/setgid binaries, this is fine. There is an
	# exception on this: programs which overwrite LD_LIBRARY_PATH will fail to
	# load the nvidia GL driver. However, this method will allow GL on the Intel
	# display where the previous situation breaks it.
	# TLDR: this allows the intel display to use GL, the bumblebee display will
	#       load the nvidia driver through vglrun in almost all cases

	# this takes care of setting correct links which is used on
	# /usr/lib/nvidia-current/gl.conf
	# multiarch support
	for arch in x86_64-linux-gnu i386-linux-gnu; do
		# check if the link exist to prevent error messages
		if update-alternatives --list ${arch}_gl_conf >/dev/null 2>&1; then
			update-alternatives --force --set ${arch}_gl_conf /usr/lib/$arch/mesa/ld.so.conf
		fi
	done
	# versions before Oneiric without multiarch
	if update-alternatives --list gl_conf >/dev/null 2>&1; then
		update-alternatives --force --set gl_conf /usr/lib/mesa/ld.so.conf
	fi
	# remove a legacy link which was not used anyway
	rm -rf /etc/alternatives/xorg_extra_modules-bumblebee

	# fix appeared in commit 68a75db4df628a910886, it should remove an excess symlink
	rm -f /usr/lib/nvidia-current/xorg/xorg

	# Refresh the dynamic loader search path so /etc/ld.so.conf.d/GL.conf ->
	# /etc/alternatives/gl_conf -> /usr/lib/mesa/ld.so.conf
	ldconfig
fi

echo
echo "Setting up and Downloading Configuration... Please wait"
echo
echo -n "(0%...15%..."
wget -O /tmp/machineinfo "http://martin-juhl.dk/bumblebee/?searchitem=`dmidecode --string system-product-name`&search=1" 1>/dev/null 2>/dev/null
echo -n "33%..."
s=1
i=1
unset profiles
while read line
do
	profiles[i+1]=`echo $line | cut -f1 -d\|`" "`echo $line | cut -f2 -d\|`":"`echo $line | cut -f9 -d\|`
	if [ ${#profiles[i+1]} -gt $(($COLUMNS - 20)) ] ; then
		profiles[i+1]=${profiles[i+1]:0:$(($COLUMNS - 20))}
	fi
	profiles[i]=$s
	((s++)) 
	((i+=2))
done < /tmp/machineinfo

profiles[i+1]="Enter Manual Configuration"
profiles[i]=997
((i+=2))
profiles[i+1]="Show all profiles."
profiles[i]=998
((i+=2))
profiles[i+1]="Do not configure now."
profiles[i]=999
echo -n "50%..."
wget -O /tmp/allmachineinfo "http://martin-juhl.dk/bumblebee/?searchitem=showall&search=1" 1>/dev/null 2>/dev/null
echo -n "75%..."

s=1
i=1
unset allprofiles
while read line
do
	allprofiles[i+1]=`echo $line | cut -f1 -d\|`" "`echo $line | cut -f2 -d\|`":"`echo $line | cut -f9 -d\|`
	if [ ${#allprofiles[i+1]} -gt $(($COLUMNS - 20)) ] ; then
		allprofiles[i+1]=${allprofiles[i+1]:0:$(($COLUMNS - 20))}
	fi
	allprofiles[i]=$s
	((s++))
	((i+=2))
done < /tmp/allmachineinfo
allprofiles[i+1]="Enter Manual Configuration"
allprofiles[i]=997
((i+=2))
allprofiles[i+1]="Do not configure now."
allprofiles[i]=999
echo "100%)"


#
#	Get current values
#
NVIDIABUSID=`grep BusID /etc/X11/xorg.conf.nvidia | sed -e "s/[ \t]*BusID[ \t]*\"\(.*\)\"/\1/g"`
CONNECTEDMONITOR=`grep ConnectedMonitor /etc/X11/xorg.conf.nvidia | sed -e "s/[ \t]*Option[ \t]*\"ConnectedMonitor\"[ \t]*\"\(.*\)\"/\1/g"`

CONFIGMODE=NONE
while [ "$CONFIGMODE" != "MANUAL" ] && [ "$CONFIGMODE" != "DONE" ] ; do

	if [ "$CONFIGMODE" != "AUTO" ] ; then
		case `cat /tmp/machineinfo | wc -l` in
		0)
			whiptail --yesno --yes-button "Manual" --no-button "Full list" \
" Your machine is not registered in the database, starting manual configuration.\n\n"\
"If you get bumblebee running, please run bumblebee-submitsystem.\n\n"\
"Do you want to run manual configuration or see the complete list of system profiles?" $LINES $COLUMNS

			if [ $? -eq 1 ] ; then
				CONFIGMODE=FULLLIST
			else
				CONFIGMODE=MANUAL
			fi
			;;
		1)
			CONFIGMODE=AUTO
			MANUFACTURER=`cat /tmp/machineinfo |cut -f1 -d\|`
			MODEL=`cat /tmp/machineinfo |cut -f2 -d\|`
			USER=`cat /tmp/machineinfo |cut -f9 -d\|`
			CONNECTEDMONITOR=`cat /tmp/machineinfo |cut -f3 -d\| | sed -e 's/ //g'`
			INTELBUSID=`cat /tmp/machineinfo |cut -f4 -d\| | sed -e 's/ //g'`
			NVIDIABUSID=`cat /tmp/machineinfo |cut -f5 -d\| | sed -e 's/ //g'`
			POWERON=`cat /tmp/machineinfo |cut -f6 -d\|`
			POWEROFF=`cat /tmp/machineinfo |cut -f7 -d\|`
			OS=`cat /tmp/machineinfo |cut -f10 -d\|`
			POWERSTATUS=`cat /tmp/machineinfo |sed -n 1p|cut -f6 -d\| | sed -e 's/ //g'`
			;;
		*)
			LIST_SIZE=$(($LINES - 10))
			choice=$(whiptail --nocancel --menu \
" Please select a machine profile to install.\n\n"\
"The profiles contains configuration for specific systems.\n\n"\
"These profiles hasn't been individually testest and are submitted by users." $LINES $COLUMNS $LIST_SIZE "${profiles[@]}"  3>&1 1>&2 2>&3)

			if [ $choice -eq 998 ] ; then
				CONFIGMODE=FULLLIST
			elif [ $choice -eq 999 ] ; then
				whiptail --msgbox " Bumblebee has NOT been configured, and probably won't work." $LINES $COLUMNS
				exit 0
			elif [ $choice -eq 997 ] ; then
				CONFIGMODE=MANUAL
			else
				CONFIGMODE=AUTO
				MANUFACTURER=`cat /tmp/machineinfo |sed -n \`echo $choice\`p|cut -f1 -d\|`
				MODEL=`cat /tmp/machineinfo |sed -n \`echo $choice\`p|cut -f2 -d\|`
				USER=`cat /tmp/machineinfo |sed -n \`echo $choice\`p|cut -f9 -d\|`
				CONNECTEDMONITOR=`cat /tmp/machineinfo |sed -n \`echo $choice\`p|cut -f3 -d\| | sed -e 's/ //g'`
				INTELBUSID=`cat /tmp/machineinfo |sed -n \`echo $choice\`p|cut -f4 -d\| | sed -e 's/ //g'`
				NVIDIABUSID=`cat /tmp/machineinfo |sed -n \`echo $choice\`p|cut -f5 -d\| | sed -e 's/ //g'`
				POWERON=`cat /tmp/machineinfo |sed -n \`echo $choice\`p|cut -f6 -d\|`
				POWEROFF=`cat /tmp/machineinfo |sed -n \`echo $choice\`p|cut -f7 -d\|`
				OS=`cat /tmp/machineinfo |sed -n \`echo $choice\`p|cut -f10 -d\|`
				POWERSTATUS=`cat /tmp/machineinfo |sed -n \`echo $choice\`p|cut -f6 -d\| | sed -e 's/ //g'`
			fi
			;;
		esac
	fi

	if [ "$CONFIGMODE" = "AUTO"  ] ; then
		if [ "$POWERSTATUS" = "UNAVAILABLE"  ] ; then
			PWSTATUS="Unavailable"
		else
			PWSTATUS="Available"
		fi

		choice=$(whiptail --nocancel --menu " The following system profile has been found/selected:\n\n"\
"	Machine: $MANUFACTURER $MODEL\n"\
"	Connected Monitor: $CONNECTEDMONITOR\n"\
"	nVidia Card BusID: $NVIDIABUSID\n"\
"	Power Control Scripts: $PWSTATUS\n"\
"	Tested on: $OS\n"\
"	Submitted by: $USER\n\n"\
"	Do you want to use this configuration?\n" $LINES $COLUMNS 5 1 "Use this Configuration" 2 "Return to System-specific Configuration" 3 "Return to Full System List" 4 "Start Manual Configuration" 5 "Cancel Configuration"  3>&1 1>&2 2>&3)

		case $choice in
		1)
			CONFIGMODE=DONE
			;;
		2)
			CONFIGMODE=NONE
			;;
		3)
			CONFIGMODE=FULLLIST
			;;
		4)
			CONFIGMODE=MANUAL
			;;
		5)
			exit 1
			;;
		esac
	fi

	if [ "$CONFIGMODE" = "FULLLIST" ] ; then
		LIST_SIZE=$(($LINES - 10))
		choice=$(whiptail --nocancel --menu \
" Please select a machine profile to install.\n\n"\
"The profiles contains configuration for specific systems.\n\n"\
"These profiles hasn't been individually tested and are submitted by users." $LINES $COLUMNS $LIST_SIZE "${allprofiles[@]}"  3>&1 1>&2 2>&3)

		if [ $choice -eq 999 ] ; then
			whiptail --msgbox " Bumblebee has NOT been configured, and probably won't work." $LINES $COLUMNS
			exit 0
		elif [ $choice -eq 997 ] ; then
			CONFIGMODE=MANUAL
		else
			CONFIGMODE=AUTO
			MANUFACTURER=`cat /tmp/allmachineinfo |sed -n \`echo $choice\`p|cut -f1 -d\|`
			MODEL=`cat /tmp/allmachineinfo |sed -n \`echo $choice\`p|cut -f2 -d\|`
			USER=`cat /tmp/allmachineinfo |sed -n \`echo $choice\`p|cut -f9 -d\|`
			CONNECTEDMONITOR=`cat /tmp/allmachineinfo |sed -n \`echo $choice\`p|cut -f3 -d\| | sed -e 's/ //g'`
			INTELBUSID=`cat /tmp/allmachineinfo |sed -n \`echo $choice\`p|cut -f4 -d\| | sed -e 's/ //g'`
			NVIDIABUSID=`cat /tmp/allmachineinfo |sed -n \`echo $choice\`p|cut -f5 -d\| | sed -e 's/ //g'`
			POWERON=`cat /tmp/allmachineinfo |sed -n \`echo $choice\`p|cut -f6 -d\|`
			POWEROFF=`cat /tmp/allmachineinfo |sed -n \`echo $choice\`p|cut -f7 -d\|`
			OS=`cat /tmp/allmachineinfo |sed -n \`echo $choice\`p|cut -f10 -d\|`
			POWERSTATUS=`cat /tmp/allmachineinfo |sed -n \`echo $choice\`p|cut -f6 -d\| | sed -e 's/ //g'`
		fi
	fi
done

if [ "$CONFIGMODE" == "MANUAL" ]; then
	POWERON="UNAVAILABLE"
	if [ `${LSPCI} |grep VGA |wc -l` -eq 2 ]; then
		NVIDIABUSID=`${LSPCI} | grep VGA | grep nVidia | awk '{ print "PCI:"$1 }' | sed s/\\\./:/g`
	elif [ `${LSPCI} |grep 3D |wc -l` -eq 1 ]; then
		NVIDIABUSID=`${LSPCI} | grep 3D  | grep nVidia | awk '{ print "PCI:"$1 }' | sed s/\\\./:/g`
	else
		if [ "$DISTRO" == "OPENSUSE" ] ; then
			whiptail --msgbox \
" The BusID of the nVidia card can't be determined.\n"\
"You must correct this manually in /etc/X11/xorg.conf.nvidia and /etc/X11/xorg.conf.nouveau\n"\
"Please report this problem..\n\n"\
"Press Any Key to continue." $LINES $COLUMNS
		else
			whiptail --msgbox \
" The BusID of the nVidia card can't be determined.\n"\
"You must correct this manually in /etc/X11/xorg.conf.nvidia\n"\
"Please report this problem..\n\n"\
"Press Any Key to continue." $LINES $COLUMNS
		fi
	fi
fi

sed -i "s/\([ \t]*BusID[ \t]*\)\".*\"/\1\"$NVIDIABUSID\"/g" /etc/X11/xorg.conf.nvidia
if [ "$DISTRO" == "OPENSUSE" ] ; then
	sed -i "s/\([ \t]*BusID[ \t]*\)\".*\"/\1\"$NVIDIABUSID\"/g" /etc/X11/xorg.conf.nouveau
fi

if [ "$CONFIGMODE" == "MANUAL" ]; then
	CONNECTEDMONITOR="UNKNOWN"
	if [ -f /usr/local/bin/bumblebee-enablecard ]; then
		/usr/local/bin/bumblebee-enablecard
	fi
	if [ -f /usr/bin/bumblebee-enablecard ]; then
		/usr/bin/bumblebee-enablecard
	fi
	if [ "$DISTRO" == "UBUNTU" ] ; then
		${MODPROBE} nvidia-current
		if [ "`lspci -v -s 01:00.0 | grep "Unknown header type"`" == "" ] ; then
			if [ `LD_LIBRARY_PATH=/usr/lib/nvidia-current /usr/lib/nvidia-current/bin/nvidia-xconfig --query-gpu-info | grep "Display Devices" | cut -f2 -d":"` -gt 0 ] ; then
				CONNECTEDMONITOR=`LD_LIBRARY_PATH=/usr/lib/nvidia-current /usr/lib/nvidia-current/bin/nvidia-xconfig --query-gpu-info | grep "Display Device 0" | cut -f2 -d\( | cut -f1 -d\)`
			fi
		fi
		${MODPROBE} -r nvidia
	fi
	if [ "$DISTRO" == "OPENSUSE" ] ; then
		${MODPROBE} nvidia 2>&1 >/dev/null
		if [ -x /usr/bin/nvidia-xconfig ] ; then
			if [ "`/usr/bin/nvidia-xconfig --query-gpu-info 2>&1 | grep ERROR`" == "" ] ; then
				if [ `/usr/bin/nvidia-xconfig --query-gpu-info | grep "Display Devices" | cut -f2 -d":"` -gt 0 ] ; then
					CONNECTEDMONITOR=`/usr/bin/nvidia-xconfig --query-gpu-info | grep "Display Device 0" | cut -f2 -d\( | cut -f1 -d\)`
				fi
			fi
		fi
		${MODPROBE} -r nvidia 2>&1 >/dev/null
	fi

	if [ -f /usr/local/bin/bumblebee-disablecard ]; then
		/usr/local/bin/bumblebee-disablecard
	fi
	if [ -f /usr/bin/bumblebee-disablecard ]; then
		/usr/bin/bumblebee-disablecard
	fi
	if [ "$CONNECTEDMONITOR" != "CRT-0" ] && [ "$CONNECTEDMONITOR" != "DFP-0" ];then
		LIST_SIZE=$(($LINES - 10))
choice=$(whiptail --nocancel --menu \
" The device for the nVidia monitor could not be detected, please\n"\
"manually choose the device, if your having problems, try another." $LINES $COLUMNS $LIST_SIZE 1 "CRT-0" 2 "DFP-0" 3 "Manually Enter" 3>&1 1>&2 2>&3)
		case "$choice" in
		1)
			CONNECTEDMONITOR="CRT-0"
		;;
		2)
			CONNECTEDMONITOR="DFP-0"
		;;
		3)
			CONNECTEDMONITOR=$(whiptail --inputbox " Enter the nVidia connected monitor:" $LINES $COLUMNS 3>&1 1>&2 2>&3)
		;;
		esac
	fi
fi

sed -i "s/\([ \t]*Option[ \t]*\"ConnectedMonitor\"[ \t]*\)".*"/\1\"$CONNECTEDMONITOR\"/g" /etc/X11/xorg.conf.nvidia

#
#	Always try to enable the card before switching scripts
#
if [ -f /usr/local/bin/bumblebee-enablecard ] ; then
	/usr/local/bin/bumblebee-enablecard
fi
if [ -f /usr/bin/bumblebee-enablecard ] ; then
	/usr/bin/bumblebee-enablecard
fi
if [ "$DISTRO" == "UBUNTU" ] ; then
	if [ ! "$POWERON" == "UNAVAILABLE" ] ; then
		echo $POWERON | xxd -r -p > /usr/local/bin/bumblebee-enablecard
		echo $POWEROFF | xxd -r -p > /usr/local/bin/bumblebee-disablecard
	else
		whiptail --msgbox \
" No power-on/off configuration has been reported for your machine,\n"\
"please manually enter configuration in:\n\n"\
"/usr/local/bin/bumblebee-enablecard and /usr/local/bin/bumblebee-disablecard\n\n"\
"Some examples are available in /usr/share/doc/bumblebee/.\n\n"\
"Press any key to continue..." $LINES $COLUMNS
		if [ ! -f /usr/local/bin/bumblebee-enablecard ] ; then
			# Not installed
			cp /usr/share/doc/bumblebee/bumblebee-enablecard.template /usr/local/bin/bumblebee-enablecard
		else
			# Already Exists
			echo
			echo "nVidia card enable-script: /usr/local/bin/bumblebee-enablecard exists moving old script to /usr/local/bin/bumblebee-enablecard.old."
			echo
			mv /usr/local/bin/bumblebee-enablecard /usr/local/bin/bumblebee-enablecard.old
			cp /usr/share/doc/bumblebee/bumblebee-enablecard.template /usr/local/bin/bumblebee-enablecard
		fi
		if [ ! -f /usr/local/bin/bumblebee-disablecard ]; then
			# Not installed
			cp /usr/share/doc/bumblebee/bumblebee-disablecard.template /usr/local/bin/bumblebee-disablecard
		else
			# Already Exists
			echo
			echo "nVidia card disable-script: /usr/local/bin/bumblebee-disablecard exists, moving old script to /usr/local/bin/bumblebee-disablecard.old."
			echo
			mv /usr/local/bin/bumblebee-disablecard /usr/local/bin/bumblebee-disablecard.old
			cp /usr/share/doc/bumblebee/bumblebee-disablecard.template /usr/local/bin/bumblebee-disablecard
		fi
	fi
fi
if [ "$DISTRO" == "OPENSUSE" ] ; then
	#
	#	Setup new scripts
	#
	if [ -f /usr/local/bin/optirun ] ; then
		SCRIPT_PATH=/usr/local/bin
	elif [ -f /usr/bin/optirun ] ; then
		SCRIPT_PATH=/usr/bin
	else
		SCRIPT_PATH=""
	fi
	if [ "$SCRIPT_PATH" != "" ] ; then
		if [ ! "$POWERON" == "UNAVAILABLE" ] ; then
			#
			#	Power scripts found
			#
			echo $POWERON | xxd -r -p > $SCRIPT_PATH/bumblebee-enablecard
			echo $POWEROFF | xxd -r -p > $SCRIPT_PATH/bumblebee-disablecard

			sed -i 's?modprobe nvidia?if \[ -f /usr/bin/nvidia-xconfig \] ; then\n\tmodprobe nvidia\nelse\n\tmodprobe nouveau\nfi?g' $SCRIPT_PATH/bumblebee-enablecard
			sed -i 's?modprobe -r nvidia?modprobe -r nouveau >/dev/null 2>\&1\nif lsmod | grep -q nouveau; then\n\techo \"Error: could not unload nouveau module, leaving card turned on\"\n\texit\nfi\nmodprobe -r nvidia >/dev/null 2>\&1?g' $SCRIPT_PATH/bumblebee-disablecard
		else
			#
			#	No power script found
			#
			whiptail --msgbox \
"No power-on/off configuration has been reported for your machine,\n"\
"please manually enter configuration in:\n\n"\
"$SCRIPT_PATH/bumblebee-enablecard and $SCRIPT_PATH/bumblebee-disablecard\n\n"\
"Some examples are available in /usr/share/doc/packages/bumblebee/examples/.\n\n"\
"Press any key to continue..." $LINES $COLUMNS
			if [ ! -f $SCRIPT_PATH/bumblebee-enablecard ] ; then
				# Not installed
				cp /usr/share/doc/packages/bumblebee/examples/bumblebee-enablecard.template $SCRIPT_PATH/bumblebee-enablecard
			else
				# Already Exists
				echo
				echo "nVidia card enable-script: $SCRIPT_PATH/bumblebee-enablecard exists moving old script to $SCRIPT_PATH/bumblebee-enablecard.old."
				echo
				mv $SCRIPT_PATH/bumblebee-enablecard $SCRIPT_PATH/bumblebee-enablecard.old
				cp /usr/share/doc/packages/bumblebee/examples/bumblebee-enablecard.template $SCRIPT_PATH/bumblebee-enablecard
			fi
			sed -i "s?INSERTPOWERON?echo \"Please run bumblebee-configuration to enable power management.\"?g" $SCRIPT_PATH/bumblebee-enablecard
			sed -i 's?modprobe nvidia?if \[ -f /usr/bin/nvidia-xconfig \] ; then\n\tmodprobe nvidia\nelse\n\tmodprobe nouveau\nfi?g' $SCRIPT_PATH/bumblebee-enablecard

			if [ ! -f $SCRIPT_PATH/bumblebee-disablecard ] ; then
				# Not installed
				cp /usr/share/doc/packages/bumblebee/examples/bumblebee-disablecard.template $SCRIPT_PATH/bumblebee-disablecard
			else
				# Already Exists
				echo
				echo "nVidia card disable-script: $SCRIPT_PATH/bumblebee-disablecard exists, moving old script to $SCRIPT_PATH/bumblebee-disablecard.old."
				echo
				mv $SCRIPT_PATH/bumblebee-disablecard $SCRIPT_PATH/bumblebee-disablecard.old
				cp /usr/share/doc/packages/bumblebee/examples/bumblebee-disablecard.template $SCRIPT_PATH/bumblebee-disablecard
			fi
			sed -i "s?INSERTPOWEROFF?echo \"Please run bumblebee-configuration to enable power management.\"?g" $SCRIPT_PATH/bumblebee-disablecard
			sed -i 's?modprobe -r nvidia?modprobe -r nouveau >/dev/null 2>\&1\nif lsmod | grep -q nouveau; then\n\techo \"Error: could not unload nouveau module, leaving card turned on\"\n\texit\nfi\nmodprobe -r nvidia >/dev/null 2>\&1?g' $SCRIPT_PATH/bumblebee-disablecard
			chmod +x $SCRIPT_PATH/bumblebee*
		fi
	fi
fi


if [ "$DISTRO" == "UBUNTU" ] ; then
	chmod +x /usr/local/bin/bumblebee*
	update-rc.d bumblebee defaults
fi


LIST_SIZE=$(($LINES - 10))
choice=$(whiptail --nocancel --menu \
" The Image Transport is how the images are transferred from the\n"\
"nVidia card to the Intel card, people has different experiences of\n"\
"performance, but just select the default if you are in doubt.\n\n"\
"I recently discovered that yuv and jpeg both has some lagging\n"\
"this is only noticable in fast moving games, such as 1st person\n"\
"shooters and for me, its only good enough with xv, even though\n"\
"xv brings down performance a little." $LINES $COLUMNS $LIST_SIZE 1 "YUV" 2 "JPEG" 3 "PROXY" 4 "XV (Default)" 5 "RGB" 3>&1 1>&2 2>&3)

case "$choice" in
1)
	IMAGETRANSPORT="yuv"
	;;
2)
	IMAGETRANSPORT="jpeg"
	;;
3)
	IMAGETRANSPORT="proxy"
	;;
4)
	IMAGETRANSPORT="xv"
	;;
5)
	IMAGETRANSPORT="rgb"
	;;
*)
	IMAGETRANSPORT="xv"
	;;
esac

sed -i 's/VGL_COMPRESS.*/VGL_COMPRESS='$IMAGETRANSPORT'/' $DEFAULT_FILE

#
#	Set userrights
#
if [ "`grep bumblebee /etc/group`" == "" ] ; then
	groupadd bumblebee
fi
if [ "$DISTRO" == "UBUNTU" ] ; then
	gpasswd -a `env |grep SUDO_USER |cut -f2 -d=` bumblebee
fi
if [ "$DISTRO" == "OPENSUSE" ] ; then
	if [ "$SUDO_USER" != "" ] ; then
		groupmod -A `env | grep SUDO_USER | cut -f2 -d=` bumblebee
	fi
fi
grep -Ev 'bumblebee' /etc/sudoers > /etc/sudoers.optiorig
mv /etc/sudoers.optiorig /etc/sudoers
chmod 0440 /etc/sudoers

#
#	That's all folks
#
whiptail --msgbox \
" Bumblebee is now configured.\n\n"\
"If your system is working, please run the bumblebee-submitsystem script\n\n"\
"If you have any problems, please run bumblebee-bugreport\n\n"\
"Have fun...." $LINES $COLUMNS
